// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  productId         Int                 @id @default(autoincrement())
  name              String
  categoryId        Int?
  description       String
  tag               String
  modelNumber       String?
  sku               String
  warranty          Decimal?
  isDeleted         Boolean             @default(false)
  meta              ProductMeta[]
  category          Category?           @relation(fields: [categoryId], references: [categoryId])
  isPublished       Boolean             @default(false)
  productType       ProductType         @default(REFURBISHED)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime?           @updatedAt
  cartItems         CartItem[]
  OrderItem         OrderItem[]
  specifications    Specification[]
  Advertisement     Advertisement?      @relation(fields: [advertisementId], references: [advertisementId])
  advertisementId   Int?
  seo               Json?
  wishlistItem      WishlistItem[]
  cost              Decimal             @default(0)
  salePrice         Decimal             @default(0)
  listPrice         Decimal             @default(0)
  quantity          Int
  discountId        Int?
  discount          Discount?           @relation(fields: [discountId], references: [discountId])
  variants          Variant[]
  ProductAttributes ProductAttributes[]

  @@unique([sku])
  @@index([name, sku])
}

model ProductAttributes {
  productAttributeId Int           @id @default(autoincrement())
  attributeId        Int
  attributeItemId    Int
  attributeItems     AttributeItem @relation(fields: [attributeItemId], references: [attributeItemId])
  attrubute          Attributes    @relation(fields: [attributeId], references: [attributeId])
  productId          Int
  product            Product       @relation(fields: [productId], references: [productId])

  @@index([attributeId, productId])
}

model ProductMeta {
  metaId    Int       @id @default(autoincrement())
  productId Int?
  imageUrl  String
  isDeleted Boolean   @default(false)
  product   Product?  @relation(fields: [productId], references: [productId], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Variant {
  variantId  Int     @id @default(autoincrement())
  variantSku String
  product    Product @relation(fields: [variantSku], references: [sku])
}

model Wishlist {
  wishlistId Int            @id @default(autoincrement())
  userId     Int
  user       User           @relation(fields: [userId], references: [userId])
  items      WishlistItem[]
  createdAt  DateTime       @default(now())
  updatedAt  DateTime?      @updatedAt

  @@unique([userId])
  @@index([userId])
}

model WishlistItem {
  wishlistItemId Int       @id @default(autoincrement())
  wishlistId     Int
  wishlist       Wishlist  @relation(fields: [wishlistId], references: [wishlistId])
  productId      Int
  product        Product   @relation(fields: [productId], references: [productId])
  createdAt      DateTime  @default(now())
  updatedAt      DateTime? @updatedAt

  @@unique([wishlistId, productId])
  @@index([wishlistId, productId])
}

enum ProductType {
  REFURBISHED
  BRAND_NEW
  DITHARI_CERTIFIED
}

model Specification {
  id                Int     @id @default(autoincrement())
  specificationName String
  specification     String
  product           Product @relation(fields: [productId], references: [productId], onDelete: Cascade)
  productId         Int
}

model Category {
  categoryId    Int            @id @default(autoincrement())
  name          String
  isDeleted     Boolean        @default(false)
  parentId      Int?
  parent        Category?      @relation("subCategories", fields: [parentId], references: [categoryId])
  subCategories Category[]     @relation("subCategories")
  products      Product[]
  meta          CategoryMeta[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime?      @updatedAt
  attributeId   Int?
  AttributeSet  AttributeSet[]
}

model AttributeSet {
  attributeSetId   Int        @id @default(autoincrement())
  categoryId       Int
  attributeSetName String
  category         Category   @relation(fields: [categoryId], references: [categoryId])
  attributeId      Int
  Attributes       Attributes @relation(fields: [attributeId], references: [attributeId])
}

model Attributes {
  attributeId       Int                 @id @default(autoincrement())
  type              String
  attributeName     String
  items             AttributeItem[]
  ProductAttributes ProductAttributes[]
  AttributeSet      AttributeSet[]
}

model AttributeItem {
  attributeItemId   Int                 @id @default(autoincrement())
  attributeName     String
  value             String
  Attributes        Attributes          @relation(fields: [attributeId], references: [attributeId], onDelete: Cascade)
  attributeId       Int
  ProductAttributes ProductAttributes[]

  @@unique([attributeId, value])
  @@index([attributeName, value])
}

model CategoryMeta {
  metaId     Int       @id @default(autoincrement())
  imageUrl   String
  isDeleted  Boolean   @default(false)
  categoryId Int?
  catogory   Category? @relation(fields: [categoryId], references: [categoryId], onDelete: Cascade)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
}

model Address {
  addressId Int            @id @default(autoincrement())
  address   String
  city      String
  district  String
  state     String
  country   String
  pinCode   String
  userId    Int?
  user      User?          @relation(fields: [userId], references: [userId])
  addresses OrderAddress[]
  createdAt DateTime       @default(now())
  updatedAt DateTime?      @updatedAt
}

model User {
  userId      Int          @id @default(autoincrement())
  firstName   String
  lastName    String?      @default("")
  email       String
  password    String?      @default("")
  phone       String
  userLogings UserLogin[]
  cart        Cart[]
  couponUsers CouponUser[]
  orders      Order[]
  addresses   Address[]
  token       String       @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime?    @updatedAt
  Wishlist    Wishlist?

  @@unique([phone])
  @@unique([email])
  @@index([firstName, lastName, email, phone])
}

model LoginLogs {
  LoginLogId Int       @id @default(autoincrement())
  phone      String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
}

model UserLogin {
  userLoginId Int       @id @default(autoincrement())
  logout      Boolean   @default(false)
  fcm         String?
  deviceId    String?
  userId      Int
  user        User      @relation(fields: [userId], references: [userId])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
}

model Cart {
  cartId    Int        @id @default(autoincrement())
  userId    Int?
  user      User?      @relation(fields: [userId], references: [userId])
  cartItems CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime?  @updatedAt
}

model CartItem {
  cartId        Int
  productId     Int
  quantity      Int
  discountName  String?
  discountValue Decimal?
  discountType  DiscountType?
  cart          Cart          @relation(fields: [cartId], references: [cartId])
  product       Product       @relation(fields: [productId], references: [productId])
  couponId      Int?
  coupon        Coupon?       @relation(fields: [couponId], references: [couponId])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime?     @updatedAt

  @@id([cartId, productId])
}

model Discount {
  discountId         Int            @id @default(autoincrement())
  discountName       String
  discountPercentage Decimal?
  discountAmount     Decimal?
  discountType       DiscountType
  coupons            Coupon[]
  createdAt          DateTime       @default(now())
  updatedAt          DateTime?      @updatedAt
  meta               DiscountMeta[]
  Product            Product[]
}

model DiscountMeta {
  metaId     Int       @id @default(autoincrement())
  imageUrl   String
  isDeleted  Boolean   @default(false)
  discountId Int?
  discount   Discount? @relation(fields: [discountId], references: [discountId], onDelete: Cascade)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
}

enum DiscountType {
  PERCENTAGE
  AMOUNT
}

model Coupon {
  couponId      Int          @id @default(autoincrement())
  couponName    String
  couponCode    String       @unique
  discountId    Int?
  discount      Discount?    @relation(fields: [discountId], references: [discountId])
  coupons       CartItem[]
  couponUsers   CouponUser[]
  startAt       DateTime
  endAt         DateTime
  numberOfUsers Int
  active        Boolean
  score         Int
  meta          CouponMeta[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime?    @updatedAt
}

model CouponMeta {
  metaId    Int       @id @default(autoincrement())
  imageUrl  String
  isDeleted Boolean   @default(false)
  couponId  Int?
  coupon    Coupon?   @relation(fields: [couponId], references: [couponId], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model CouponUser {
  couponId  Int
  coupons   Coupon    @relation(fields: [couponId], references: [couponId])
  userId    Int
  user      User      @relation(fields: [userId], references: [userId])
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@id([userId, couponId])
}

enum OrderStaus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELED
}

enum PaymentMethods {
  CREDIT_CARD
  DEBIT_CARD
  CASH_ON_DELIVERY
  UPI
}

model Order {
  orderId            Int            @id() @default(autoincrement())
  userId             Int
  user               User           @relation(fields: [userId], references: [userId])
  status             OrderStaus
  totalDiscountSum   Decimal        @default(0)
  totalCost          Decimal
  totalSumWithCharge Decimal?
  totalItem          Int            @default(0)
  OrderItem          OrderItem[]
  addresses          OrderAddress[]
  shippingCharge     Decimal?
  expectedDelivery   DateTime?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime?      @updatedAt
  Payment            Payment[]
}

model OrderAddress {
  orderId   Int
  order     Order   @relation(fields: [orderId], references: [orderId])
  addressId Int
  address   Address @relation(fields: [addressId], references: [addressId])

  @@id([orderId, addressId])
}

model OrderItem {
  orderId       Int
  productId     Int
  quantity      Int
  unitPrice     Decimal
  total         Decimal
  discountName  String?
  discountValue Decimal?
  discountType  DiscountType?
  order         Order         @relation(fields: [orderId], references: [orderId])
  product       Product       @relation(fields: [productId], references: [productId])
  discount      Decimal?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime?     @updatedAt

  @@id([orderId, productId])
}

model Payment {
  paymentId     Int            @id() @default(autoincrement())
  orderId       Int
  order         Order          @relation(fields: [orderId], references: [orderId])
  paymentMethod PaymentMethods
  transactionId String?
  amount        Decimal
  status        PaymentStatus
  createdAt     DateTime       @default(now())
}

enum PaymentStatus {
  PAID
  UNPAID
  FAILED
}

model Advertisement {
  advertisementId Int       @id @default(autoincrement())
  products        Product[]
  imageURL        String
  description     String
  type            String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime? @updatedAt
}
