// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Counter {
  counterId Int       @id @default(autoincrement())
  type      String    @unique
  value     Int       @default(100)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@index([type])
}

model Product {
  productId           Int                     @id @default(autoincrement())
  name                String
  categoryId          Int?
  description         String?
  tag                 String?
  modelNumber         String?
  sku                 String
  warranty            Decimal?
  isDeleted           Boolean                 @default(false)
  meta                ProductMeta[]
  category            Category?               @relation(fields: [categoryId], references: [categoryId])
  isPublished         Boolean                 @default(false)
  productType         ProductType             @default(REFURBISHED)
  createdAt           DateTime                @default(now())
  updatedAt           DateTime?               @updatedAt
  cartItems           CartItem[]
  orderItems          OrderItem[]
  specifications      Specification[]
  advertisement       Advertisement?          @relation(fields: [advertisementId], references: [advertisementId])
  advertisementId     Int?
  seo                 Json?
  wishlistItem        WishlistItem[]
  cost                Decimal                 @default(0)
  salePrice           Decimal                 @default(0)
  strikingPrice       Decimal                 @default(0)
  quantity            Int?
  discountId          Int?
  discount            Discount?               @relation(fields: [discountId], references: [discountId])
  productAttributes   ProductAttributes[]
  productDiscounts    ProductDiscount[]
  shippings           Shipping[]
  variants            ProductVariant[]        @relation("ProductVariants")
  variantProducts     ProductVariant[]        @relation("VariantProducts")
  relates             RelatedProduct[]        @relation("ProductRelated")
  productRelated      RelatedProduct[]        @relation("RelatedProducts")
  togethers           BoughtTogetherProduct[] @relation("ProductTogether")
  togetherProduct     BoughtTogetherProduct[] @relation("TogetherProducts")
  qCInventories       QCInventory[]           @relation("ProductQCInventory")
  ratings             Rating[]
  inventory           Inventory?
  productSuppliers    ProductSupplier[]
  brandId             Int?
  brand               Brands?                 @relation(fields: [brandId], references: [brandId])
  mostPopularProducts MostPopular?
  averageRating       AverageRating?
  supplierReturns     SupplierReturn[]
  scraps              Scrap[]
  productViews        ProductViews[]

  @@unique([sku])
  @@index([name, sku])
  @@index([name])
  @@index([sku])
  @@index([brandId])
  @@index([categoryId])
  @@index([discountId])
}

model Brands {
  brandId   Int       @id @default(autoincrement())
  type      String    @unique
  brandName String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  products  Product[]

  @@index([type])
}

model ProductViews {
  productViewId Int       @id @default(autoincrement())
  productId     Int
  userId        Int
  count         Int       @default(0)
  product       Product   @relation(fields: [productId], references: [productId])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt

  @@unique([productId, userId])
}

model AverageRating {
  productId Int     @unique
  product   Product @relation(fields: [productId], references: [productId])
  value     Decimal @default(0)
}

model MostPopular {
  mostPopularId Int       @id @default(autoincrement())
  productId     Int       @unique
  product       Product   @relation(fields: [productId], references: [productId])
  score         Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt
}

model Supplier {
  supplierId        Int                 @id @default(autoincrement())
  name              String
  companyTitle      String
  contactPerson     String?
  email             String
  phoneNumber       String
  building          String?
  landMark          String?
  area              String?
  region            String?
  country           String?
  products          ProductSupplier[]
  purchaseOrders    PurchaseOrder[]
  supplierInventory SupplierInventory[]
  deliveryAddress   Json?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime?           @updatedAt
  orderItemsByUsers OrderItem[]
  supplierReturns   SupplierReturn[]
  scraps            Scrap[]
  type              SupplierType        @default(NORMAL)

  @@unique([email])
  @@index([email])
}

enum SupplierType {
  DEFAULT
  NORMAL
}

model PurchaseOrder {
  purchaseOrderId           Int                    @id @default(autoincrement())
  buyer                     String
  orderDate                 DateTime
  deliveryDate              DateTime
  supplier                  Supplier               @relation(fields: [supplierId], references: [supplierId])
  supplierId                Int
  productOrdersItems        ProductPurchaseOrder[]
  transactions              Transaction[]
  totalAmount               Decimal                @default(0)
  totalAmountWithAllcahrges Decimal                @default(0)
  balance                   Decimal                @default(0)
  shippingCharge            Decimal                @default(0)
  status                    purchaseOrderStatus    @default(PURCHASE_ORDER)
  createdAt                 DateTime               @default(now())
  updatedAt                 DateTime?              @updatedAt

  @@index([supplierId])
}

enum purchaseOrderStatus {
  PURCHASE_ORDER
  PURCHASE_RECIEVED
  BILL_CREDIT
}

model ProductSupplier {
  productSupplierId  Int                    @id @default(autoincrement())
  product            Product                @relation(fields: [productId], references: [productId])
  supplier           Supplier               @relation(fields: [supplierId], references: [supplierId])
  productId          Int
  supplierId         Int
  cost               Decimal
  productOrdersItems ProductPurchaseOrder[]
  createdAt          DateTime               @default(now())
  updatedAt          DateTime?              @updatedAt

  @@unique([productId, supplierId])
  @@index([productId])
  @@index([supplierId])
}

model ProductPurchaseOrder {
  productPurchaseOrderId Int               @id @default(autoincrement())
  purchaseOrder          PurchaseOrder     @relation(fields: [purchaseOrderId], references: [purchaseOrderId])
  purchaseOrderId        Int
  productSupplier        ProductSupplier   @relation(fields: [productSupplierId], references: [productSupplierId])
  productSupplierId      Int
  quantity               Int
  quantityRemains        Int
  cost                   Decimal
  total                  Decimal           @default(0)
  createdAt              DateTime          @default(now())
  updatedAt              DateTime?         @updatedAt
  scraps                 Scrap[]
  supplierReturns        SupplierReturn[]
  supplierInventoryId    Int
  supplierInventory      SupplierInventory @relation(fields: [supplierInventoryId], references: [supplierInventoryId])

  @@index([purchaseOrderId])
  @@index([productSupplierId])
}

model Transaction {
  transactionId   Int           @id @default(autoincrement())
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [purchaseOrderId])
  purchaseOrderId Int
  amount          Decimal
  transactionDate DateTime      @default(now())
  paymentMode     PaymentMode
  creditDays      Int           @default(0)
}

enum PaymentMode {
  CASH
  CREDIT
  CHEQUE
  BANK_TRANSFER
}

model Inventory {
  inventoryId       Int                 @id @default(autoincrement())
  productId         Int                 @unique
  quantityOnHand    Int                 @default(0)
  reorderLevel      Int                 @default(0)
  maintainLevel     Int                 @default(0)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime?           @updatedAt
  supplierInventory SupplierInventory[]

  product Product @relation(fields: [productId], references: [productId])
}

model SupplierInventory {
  supplierInventoryId  Int                    @id @default(autoincrement())
  supplier             Supplier               @relation(fields: [supplierId], references: [supplierId])
  supplierId           Int
  inventory            Inventory              @relation(fields: [inventoryId], references: [inventoryId])
  inventoryId          Int
  quantityOnHand       Int                    @default(0)
  reorderLevel         Int                    @default(0)
  maintainLevel        Int                    @default(0)
  cost                 Decimal                @default(0)
  total                Decimal                @default(0)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime?              @updatedAt
  supplierReturns      SupplierReturn[]
  orderItems           OrderItem[]
  productPurchaseOrder ProductPurchaseOrder[]

  @@unique([supplierId, inventoryId])
  @@index([supplierId, inventoryId])
  @@index([supplierId])
  @@index([inventoryId])
}

model QCInventory {
  qcInventoryId  Int              @id @default(autoincrement())
  productId      Int
  product        Product          @relation("ProductQCInventory", fields: [productId], references: [productId], onDelete: Cascade)
  status         QCStatus
  checkedBy      String?
  checkedAt      DateTime         @default(now())
  comments       String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime?        @updatedAt
  scraps         Scrap[]
  supplierReturn SupplierReturn[]
  orderItems     OrderItem[]

  @@index([productId])
}

model Scrap {
  scrapId                Int                   @id() @default(autoincrement())
  orderId                String
  order                  Order                 @relation(fields: [orderId], references: [orderId])
  qcInventoryId          Int
  reason                 String
  supplierId             Int
  productId              Int
  supplier               Supplier              @relation(fields: [supplierId], references: [supplierId])
  product                Product               @relation(fields: [productId], references: [productId])
  quantity               Int
  unitPrice              Decimal
  createdAt              DateTime              @default(now())
  updatedAt              DateTime?             @updatedAt
  qcInventory            QCInventory           @relation(fields: [qcInventoryId], references: [qcInventoryId])
  productPurchaseOrderId Int?
  productPurchaseOrder   ProductPurchaseOrder? @relation(fields: [productPurchaseOrderId], references: [productPurchaseOrderId])
  status                 ScrapStatus           @default(PENDING)

  @@index([orderId, productId, supplierId])
  @@index([productId])
  @@index([supplierId])
  @@index([qcInventoryId])
}

enum ScrapStatus {
  PENDING
  DISPERSE
}

model SupplierReturn {
  returnId               Int                   @id() @default(autoincrement())
  supplierId             Int
  productId              Int
  quantity               Int
  unitPrice              Decimal
  reason                 String
  createdAt              DateTime              @default(now())
  updatedAt              DateTime?             @updatedAt
  supplierInventoryId    Int
  supplier               Supplier              @relation(fields: [supplierId], references: [supplierId])
  product                Product               @relation(fields: [productId], references: [productId])
  supplierInventory      SupplierInventory     @relation(fields: [supplierInventoryId], references: [supplierInventoryId])
  productPurchaseOrderId Int?
  qcInventoryId          Int?
  qcInventory            QCInventory?          @relation(fields: [qcInventoryId], references: [qcInventoryId])
  productPurchaseOrder   ProductPurchaseOrder? @relation(fields: [productPurchaseOrderId], references: [productPurchaseOrderId])
  status                 SupplierReturnStatus  @default(PENDING)

  @@index([supplierId, productId])
}

enum SupplierReturnStatus {
  PENDING
  TO_DISPERSE
  DISPERSE
}

enum QCStatus {
  QC_COMPLETED
  PENDING
}

model ProductDiscount {
  discountId Int       @id @default(autoincrement())
  amount     Int?
  productId  Int
  product    Product   @relation(fields: [productId], references: [productId], onDelete: Cascade)
  startFrom  DateTime?
  startTo    DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt

  @@index([productId])
}

model Shipping {
  shippingId     Int      @id @default(autoincrement())
  shippingDays   Int?
  city           String?
  shippingCharge Decimal?
  productId      Int
  product        Product  @relation(fields: [productId], references: [productId], onDelete: Cascade)

  @@index([productId])
}

model ProductAttributes {
  productAttributeId Int           @id @default(autoincrement())
  attributeId        Int
  attributeItemId    Int
  attributeItem      AttributeItem @relation(fields: [attributeItemId], references: [attributeItemId], onDelete: Cascade)
  attribute          Attributes    @relation(fields: [attributeId], references: [attributeId], onDelete: Cascade)
  productId          Int
  product            Product       @relation(fields: [productId], references: [productId], onDelete: Cascade)
  createdAt          DateTime      @default(now())
  updatedAt          DateTime?     @updatedAt
  attributeSetId     Int
  attributeSet       AttributeSet  @relation(fields: [attributeSetId], references: [attributeSetId], onDelete: Cascade)

  @@index([attributeId, productId])
  @@index([attributeId, attributeItemId])
}

model ProductMeta {
  metaId     Int       @id @default(autoincrement())
  productId  Int?
  imageUrl   String
  isDeleted  Boolean   @default(false)
  imageOrder Int       @default(0)
  product    Product?  @relation(fields: [productId], references: [productId], onDelete: Cascade)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt

  @@index([productId])
}

model ProductVariant {
  productId Int
  variantId Int
  product   Product @relation("ProductVariants", fields: [productId], references: [productId], onDelete: Cascade)
  variant   Product @relation("VariantProducts", fields: [variantId], references: [productId], onDelete: Cascade)

  @@id([productId, variantId])
  @@index([variantId, productId])
}

model RelatedProduct {
  productId        Int
  relatedProductId Int
  product          Product @relation("ProductRelated", fields: [productId], references: [productId], onDelete: Cascade)
  relatedProducts  Product @relation("RelatedProducts", fields: [relatedProductId], references: [productId], onDelete: Cascade)

  @@id([productId, relatedProductId])
  @@index([productId, relatedProductId])
}

model BoughtTogetherProduct {
  productId         Int
  togetherProductId Int
  product           Product @relation("ProductTogether", fields: [productId], references: [productId], onDelete: Cascade)
  togetherProducts  Product @relation("TogetherProducts", fields: [togetherProductId], references: [productId], onDelete: Cascade)

  @@id([productId, togetherProductId])
  @@index([productId, togetherProductId])
}

model Wishlist {
  wishlistId Int            @id @default(autoincrement())
  userId     Int
  user       User           @relation(fields: [userId], references: [userId])
  items      WishlistItem[]
  createdAt  DateTime       @default(now())
  updatedAt  DateTime?      @updatedAt

  @@unique([userId])
  @@index([userId])
}

model WishlistItem {
  wishlistItemId Int       @id @default(autoincrement())
  wishlistId     Int
  wishlist       Wishlist  @relation(fields: [wishlistId], references: [wishlistId])
  productId      Int
  product        Product   @relation(fields: [productId], references: [productId])
  createdAt      DateTime  @default(now())
  updatedAt      DateTime? @updatedAt

  @@unique([wishlistId, productId])
  @@index([wishlistId, productId])
}

enum ProductType {
  REFURBISHED
  BRAND_NEW
  DITHARI_CERTIFIED
}

model Specification {
  id                Int       @id @default(autoincrement())
  specificationName String
  value             String
  product           Product   @relation(fields: [productId], references: [productId], onDelete: Cascade)
  productId         Int
  createdAt         DateTime  @default(now())
  updatedAt         DateTime? @updatedAt

  @@index([productId])
}

model Category {
  categoryId    Int            @id @default(autoincrement())
  name          String
  isDeleted     Boolean        @default(false)
  isInMenu      Boolean
  status        Boolean
  seo           Json
  parentId      Int?
  parent        Category?      @relation("subCategories", fields: [parentId], references: [categoryId])
  subCategories Category[]     @relation("subCategories")
  products      Product[]
  meta          CategoryMeta[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime?      @updatedAt
  attributeId   Int?
  attributeSets AttributeSet[]

  @@index([categoryId])
}

model AttributeSet {
  attributeSetId    Int                 @id @default(autoincrement())
  attributeSetName  String
  category          Category?           @relation(fields: [categoryId], references: [categoryId])
  categoryId        Int
  items             AttributeSetItem[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime?           @updatedAt
  productAttributes ProductAttributes[]

  @@index([categoryId])
}

model AttributeSetItem {
  attributeSetItemId Int          @id @default(autoincrement())
  attributeSetId     Int
  attributeId        Int
  attribute          Attributes   @relation(fields: [attributeId], references: [attributeId], onDelete: Cascade)
  attributeSet       AttributeSet @relation(fields: [attributeSetId], references: [attributeSetId], onDelete: Cascade)
  createdAt          DateTime     @default(now())
  updatedAt          DateTime?    @updatedAt

  @@index([attributeSetId])
  @@index([attributeId])
}

model Attributes {
  attributeId       Int                 @id @default(autoincrement())
  type              String
  attributeName     String
  items             AttributeItem[]
  productAttributes ProductAttributes[]
  attributeSetItem  AttributeSetItem[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime?           @updatedAt
}

model AttributeItem {
  attributeItemId   Int                 @id @default(autoincrement())
  value             String
  attribute         Attributes          @relation(fields: [attributeId], references: [attributeId], onDelete: Cascade)
  attributeId       Int
  productAttributes ProductAttributes[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime?           @updatedAt

  @@unique([attributeId, value])
  @@index([attributeId, value])
  @@index([value])
}

model CategoryMeta {
  metaId     Int       @id @default(autoincrement())
  imageUrl   String
  isDeleted  Boolean   @default(false)
  categoryId Int?
  catogory   Category? @relation(fields: [categoryId], references: [categoryId], onDelete: Cascade)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt

  @@index([categoryId])
}

model Address {
  addressId     Int            @id @default(autoincrement())
  building      String?
  addressTitle  String?
  landMark      String?
  area          String?
  region        String
  country       String
  countryCode   String
  contactNumber String
  userId        Int?
  user          User?          @relation(fields: [userId], references: [userId], onDelete: Cascade)
  addresses     OrderAddress[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime?      @updatedAt

  @@index([userId])
}

model User {
  userId       Int            @id @default(autoincrement())
  firstName    String
  lastName     String?        @default("")
  email        String
  password     String?        @default("")
  nationality  String?
  gender       Gender?
  dob          DateTime?
  userLogings  UserLogin[]
  cart         Cart[]
  couponUsers  CouponUser[]
  orders       Order[]
  addresses    Address[]
  token        String         @unique
  createdAt    DateTime       @default(now())
  updatedAt    DateTime?      @updatedAt
  wishlist     Wishlist?
  phoneNumbers phoneNumbers[]
  ratings      Rating[]

  @@unique([email])
  @@index([firstName])
  @@index([lastName])
  @@index([email])
}

model Rating {
  ratingId    Int          @id @default(autoincrement())
  value       Decimal
  userId      Int
  user        User         @relation(fields: [userId], references: [userId])
  productId   Int
  product     Product      @relation(fields: [productId], references: [productId])
  description String?
  meta        RatingMeta[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime?    @updatedAt

  @@unique([userId, productId])
  @@index([userId, productId])
}

model RatingMeta {
  metaId    Int       @id @default(autoincrement())
  imageUrl  String
  isDeleted Boolean   @default(false)
  ratingId  Int?
  rating    Rating?   @relation(fields: [ratingId], references: [ratingId], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@index([ratingId])
}

enum Gender {
  MALE
  FEMALE
}

model phoneNumbers {
  phoneId     Int    @id @default(autoincrement())
  phone       String
  countryCode String
  userId      Int
  user        User   @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@unique([phone])
  @@index([phone])
}

model LoginLogs {
  LoginLogId Int       @id @default(autoincrement())
  phone      String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
}

model UserLogin {
  userLoginId Int       @id @default(autoincrement())
  logout      Boolean   @default(false)
  fcm         String?
  deviceId    String?
  userId      Int
  user        User      @relation(fields: [userId], references: [userId])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt

  @@index([userId])
}

model Cart {
  cartId    Int        @id @default(autoincrement())
  userId    Int?
  user      User?      @relation(fields: [userId], references: [userId])
  cartItems CartItem[]
  couponId  Int?
  coupon    Coupon?    @relation(fields: [couponId], references: [couponId])
  createdAt DateTime   @default(now())
  updatedAt DateTime?  @updatedAt

  @@index([userId])
}

model CartItem {
  cartId        Int
  productId     Int
  quantity      Int
  discountName  String?
  discountValue Decimal?
  discountType  DiscountType?
  cart          Cart          @relation(fields: [cartId], references: [cartId])
  product       Product       @relation(fields: [productId], references: [productId])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime?     @updatedAt

  @@id([cartId, productId])
  @@index([cartId, productId])
}

model Discount {
  discountId         Int            @id @default(autoincrement())
  discountName       String
  discountPercentage Decimal?
  discountAmount     Decimal?
  discountType       DiscountType
  createdAt          DateTime       @default(now())
  updatedAt          DateTime?      @updatedAt
  meta               DiscountMeta[]
  product            Product[]
}

model DiscountMeta {
  metaId     Int       @id @default(autoincrement())
  imageUrl   String
  isDeleted  Boolean   @default(false)
  discountId Int?
  discount   Discount? @relation(fields: [discountId], references: [discountId], onDelete: Cascade)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt

  @@index([discountId])
}

enum DiscountType {
  PERCENTAGE
  AMOUNT
}

model Coupon {
  couponId      Int          @id @default(autoincrement())
  couponName    String
  couponCode    String       @unique
  value         Decimal
  type          CouponType   @default(AMOUNT)
  carts         Cart[]
  couponUsers   CouponUser[]
  orders        Order[]
  startAt       DateTime
  endAt         DateTime
  numberOfUsers Int
  radeemPerUser Int          @default(1)
  active        Boolean
  score         Int
  meta          CouponMeta[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime?    @updatedAt
}

enum CouponType {
  AMOUNT
  PERCENTAGE
}

model CouponMeta {
  metaId    Int       @id @default(autoincrement())
  imageUrl  String
  isDeleted Boolean   @default(false)
  couponId  Int?
  coupon    Coupon?   @relation(fields: [couponId], references: [couponId], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model CouponUser {
  couponUserId Int       @id @default(autoincrement())
  couponId     Int
  coupons      Coupon    @relation(fields: [couponId], references: [couponId])
  userId       Int
  user         User      @relation(fields: [userId], references: [userId])
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt

  @@index([userId, couponId])
  @@index([userId])
}

enum OrderStatus {
  PENDING
  PROCEEDED
  PACKED
  OUT_FOR_DELIVERY
  RIDER_TO_ACCEPT
  DELIVERED
  COMPLETED
  CANCELED
}

enum PaymentMethods {
  CREDIT_CARD
  DEBIT_CARD
  CASH_ON_DELIVERY
  UPI
}

model Order {
  orderId              String               @id()
  userId               Int
  user                 User                 @relation(fields: [userId], references: [userId])
  status               OrderStatus
  totalDiscountSum     Decimal              @default(0)
  totalCost            Decimal
  totalSumWithCharge   Decimal?
  radeemedAmount       Decimal?
  couponId             Int?
  coupon               Coupon?              @relation(fields: [couponId], references: [couponId])
  totalItem            Int                  @default(0)
  orderItems           OrderItem[]
  addresses            OrderAddress[]
  riderId              Int?
  rider                Rider?               @relation(fields: [riderId], references: [riderId])
  shippingCharge       Decimal?
  expectedDelivery     DateTime?
  createdAt            DateTime             @default(now())
  updatedAt            DateTime?            @updatedAt
  payments             Payment[]
  orderStatusHistories OrderStatusHistory[]
  scraps               Scrap[]

  @@index([status, riderId])
  @@index([status])
  @@index([riderId])
  @@index([userId])
}

model OrderStatusHistory {
  orderStatusId Int         @id() @default(autoincrement())
  orderId       String
  order         Order       @relation(fields: [orderId], references: [orderId], onDelete: Cascade)
  status        OrderStatus @default(PENDING)
  passed        Boolean     @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime?   @updatedAt

  @@index([orderId, status])
}

model OrderAddress {
  orderId   String
  order     Order     @relation(fields: [orderId], references: [orderId], onDelete: Cascade)
  addressId Int
  address   Address   @relation(fields: [addressId], references: [addressId])
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@id([orderId, addressId])
  @@index([orderId, addressId])
}

model OrderItem {
  orderId             String
  productId           Int
  quantity            Int
  cumulativeQuantity  Int               @default(0)
  unitPrice           Decimal
  total               Decimal
  discountName        String?
  discountValue       Decimal?
  discountType        DiscountType?
  order               Order             @relation(fields: [orderId], references: [orderId], onDelete: Cascade)
  product             Product           @relation(fields: [productId], references: [productId])
  discount            Decimal?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime?         @updatedAt
  qcInventoryId       Int?
  qcInventory         QCInventory?      @relation(fields: [qcInventoryId], references: [qcInventoryId])
  supplierId          Int
  pointToSupplier     Supplier          @relation(fields: [supplierId], references: [supplierId])
  qcStatus            OrderItemQcStatus @default(NORMAL)
  supplierInventoryId Int
  supplierInventory   SupplierInventory @relation(fields: [supplierInventoryId], references: [supplierInventoryId])

  @@id([orderId, productId, supplierId, qcStatus])
  @@index([orderId, productId, supplierId, qcStatus])
}

enum OrderItemQcStatus {
  NORMAL
  INVENTORY
  SCRAP
  SUPPLIER
}

model Rider {
  riderId   Int       @id() @default(autoincrement())
  name      String
  email     String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  orders    Order[]

  @@unique([email])
  @@index([email])
}

model Payment {
  paymentId     Int            @id() @default(autoincrement())
  orderId       String
  order         Order          @relation(fields: [orderId], references: [orderId], onDelete: Cascade)
  paymentMethod PaymentMethods
  transactionId String?
  amount        Decimal
  status        PaymentStatus
  createdAt     DateTime       @default(now())
  updatedAt     DateTime?      @updatedAt
}

enum PaymentStatus {
  PAID
  UNPAID
  FAILED
}

model Advertisement {
  advertisementId Int       @id @default(autoincrement())
  products        Product[]
  imageURL        String
  description     String
  type            String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime? @updatedAt
}

model Employee {
  id        Int          @id @default(autoincrement())
  email     String       @unique
  name      String
  password  String       @default("")
  role      EmployeeRole @default(USER)
  createdAt DateTime     @default(now())
  updatedAt DateTime?    @updatedAt
}

enum EmployeeRole {
  USER
  ADMIN
}

model Banner {
  bannerId   Int          @id @default(autoincrement())
  alt        String
  tag        String
  dimension  String
  pageType   PageType     @default(OTHER)
  type       BannerType   @default(NORMAL)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime?    @updatedAt
  bannerMeta BannerMeta[]
}

model BannerMeta {
  metaId    Int       @id @default(autoincrement())
  bannerId  Int
  banner    Banner    @relation(fields: [bannerId], references: [bannerId])
  imageUrl  String
  order     Int       @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

enum BannerType {
  GIF
  SLIDER
  NORMAL
}

enum PageType {
  HOME
  CATEGORY
  OTHER
}
