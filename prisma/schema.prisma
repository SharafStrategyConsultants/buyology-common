// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  productId         Int                     @id @default(autoincrement())
  name              String
  categoryId        Int?
  description       String?
  tag               String?
  modelNumber       String?
  sku               String
  warranty          Decimal?
  isDeleted         Boolean                 @default(false)
  meta              ProductMeta[]
  category          Category?               @relation(fields: [categoryId], references: [categoryId])
  isPublished       Boolean                 @default(false)
  productType       ProductType             @default(REFURBISHED)
  createdAt         DateTime                @default(now())
  updatedAt         DateTime?               @updatedAt
  cartItems         CartItem[]
  OrderItem         OrderItem[]
  specifications    Specification[]
  Advertisement     Advertisement?          @relation(fields: [advertisementId], references: [advertisementId])
  advertisementId   Int?
  seo               Json?
  wishlistItem      WishlistItem[]
  cost              Decimal                 @default(0)
  salePrice         Decimal                 @default(0)
  strikingPrice     Decimal                 @default(0)
  quantity          Int?
  discountId        Int?
  discount          Discount?               @relation(fields: [discountId], references: [discountId])
  ProductAttributes ProductAttributes[]
  ProductDiscount   ProductDiscount[]
  Shipping          Shipping[]
  variants          ProductVariant[]        @relation("ProductVariants")
  variantProducts   ProductVariant[]        @relation("VariantProducts")
  relates           RelatedProduct[]        @relation("ProductRelated")
  productRelated    RelatedProduct[]        @relation("RelatedProducts")
  togethers         BoughtTogetherProduct[] @relation("ProductTogether")
  togetherProduct   BoughtTogetherProduct[] @relation("TogetherProducts")

  @@unique([sku])
  @@index([name, sku])
}

model ProductDiscount {
  discountId Int       @id @default(autoincrement())
  amount     Int?
  productId  Int
  product    Product   @relation(fields: [productId], references: [productId], onDelete: Cascade)
  startFrom  DateTime?
  startTo    DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
}

model Shipping {
  shippingId     Int      @id @default(autoincrement())
  shippingDays   Int?
  city           String?
  shippingCharge Decimal?
  productId      Int
  product        Product  @relation(fields: [productId], references: [productId], onDelete: Cascade)
}

model ProductAttributes {
  productAttributeId Int           @id @default(autoincrement())
  attributeId        Int
  attributeItemId    Int
  attributeItem      AttributeItem @relation(fields: [attributeItemId], references: [attributeItemId], onDelete: Cascade)
  attribute          Attributes    @relation(fields: [attributeId], references: [attributeId], onDelete: Cascade)
  productId          Int
  product            Product       @relation(fields: [productId], references: [productId], onDelete: Cascade)
  createdAt          DateTime      @default(now())
  updatedAt          DateTime?     @updatedAt
  attributeSetId     Int
  attributeSet       AttributeSet  @relation(fields: [attributeSetId], references: [attributeSetId], onDelete: Cascade)

  @@index([attributeId, productId])
}

model ProductMeta {
  metaId    Int       @id @default(autoincrement())
  productId Int?
  imageUrl  String
  isDeleted Boolean   @default(false)
  product   Product?  @relation(fields: [productId], references: [productId], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model ProductVariant {
  productId Int
  variantId Int
  product   Product @relation("ProductVariants", fields: [productId], references: [productId], onDelete: Cascade)
  variant   Product @relation("VariantProducts", fields: [variantId], references: [productId], onDelete: Cascade)

  @@id([productId, variantId])
}

model RelatedProduct {
  productId        Int
  relatedProductId Int
  product          Product @relation("ProductRelated", fields: [productId], references: [productId], onDelete: Cascade)
  relatedProducts  Product @relation("RelatedProducts", fields: [relatedProductId], references: [productId], onDelete: Cascade)

  @@id([productId, relatedProductId])
}

model BoughtTogetherProduct {
  productId         Int
  togetherProductId Int
  product           Product @relation("ProductTogether", fields: [productId], references: [productId], onDelete: Cascade)
  togetherProducts  Product @relation("TogetherProducts", fields: [togetherProductId], references: [productId], onDelete: Cascade)

  @@id([productId, togetherProductId])
}

model Wishlist {
  wishlistId Int            @id @default(autoincrement())
  userId     Int
  user       User           @relation(fields: [userId], references: [userId])
  items      WishlistItem[]
  createdAt  DateTime       @default(now())
  updatedAt  DateTime?      @updatedAt

  @@unique([userId])
  @@index([userId])
}

model WishlistItem {
  wishlistItemId Int       @id @default(autoincrement())
  wishlistId     Int
  wishlist       Wishlist  @relation(fields: [wishlistId], references: [wishlistId])
  productId      Int
  product        Product   @relation(fields: [productId], references: [productId])
  createdAt      DateTime  @default(now())
  updatedAt      DateTime? @updatedAt

  @@unique([wishlistId, productId])
  @@index([wishlistId, productId])
}

enum ProductType {
  REFURBISHED
  BRAND_NEW
  DITHARI_CERTIFIED
}

model Specification {
  id                Int       @id @default(autoincrement())
  specificationName String
  value             String
  product           Product   @relation(fields: [productId], references: [productId], onDelete: Cascade)
  productId         Int
  createdAt         DateTime  @default(now())
  updatedAt         DateTime? @updatedAt
}

model Category {
  categoryId    Int            @id @default(autoincrement())
  name          String
  isDeleted     Boolean        @default(false)
  isInMenu      Boolean
  status        Boolean
  seo           Json
  parentId      Int?
  parent        Category?      @relation("subCategories", fields: [parentId], references: [categoryId])
  subCategories Category[]     @relation("subCategories")
  products      Product[]
  meta          CategoryMeta[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime?      @updatedAt
  attributeId   Int?
  AttributeSet  AttributeSet[]
}

model AttributeSet {
  attributeSetId    Int                 @id @default(autoincrement())
  attributeSetName  String
  Category          Category?           @relation(fields: [categoryId], references: [categoryId])
  categoryId        Int
  items             AttributeSetItem[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime?           @updatedAt
  ProductAttributes ProductAttributes[]
}

model AttributeSetItem {
  attributeSetItemId Int          @id @default(autoincrement())
  attributeSetId     Int
  attributeId        Int
  Attributes         Attributes   @relation(fields: [attributeId], references: [attributeId], onDelete: Cascade)
  AttributeSet       AttributeSet @relation(fields: [attributeSetId], references: [attributeSetId], onDelete: Cascade)
  createdAt          DateTime     @default(now())
  updatedAt          DateTime?    @updatedAt
}

model Attributes {
  attributeId       Int                 @id @default(autoincrement())
  type              String
  attributeName     String
  items             AttributeItem[]
  ProductAttributes ProductAttributes[]
  AttributeSetItem  AttributeSetItem[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime?           @updatedAt
}

model AttributeItem {
  attributeItemId   Int                 @id @default(autoincrement())
  attributeName     String
  value             String
  Attributes        Attributes          @relation(fields: [attributeId], references: [attributeId], onDelete: Cascade)
  attributeId       Int
  ProductAttributes ProductAttributes[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime?           @updatedAt

  @@unique([attributeId, value])
  @@index([attributeName, value])
}

model CategoryMeta {
  metaId     Int       @id @default(autoincrement())
  imageUrl   String
  isDeleted  Boolean   @default(false)
  categoryId Int?
  catogory   Category? @relation(fields: [categoryId], references: [categoryId], onDelete: Cascade)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
}

model Address {
  addressId     Int            @id @default(autoincrement())
  Building      String
  landMark      String?
  area          String?
  region        String
  country       String
  countryCode   String
  contactNumber String
  userId        Int?
  user          User?          @relation(fields: [userId], references: [userId], onDelete: Cascade)
  addresses     OrderAddress[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime?      @updatedAt
}

model User {
  userId       Int            @id @default(autoincrement())
  firstName    String
  lastName     String?        @default("")
  email        String
  password     String?        @default("")
  nationality  String?
  gender       Gender?
  dob          DateTime?
  userLogings  UserLogin[]
  cart         Cart[]
  couponUsers  CouponUser[]
  orders       Order[]
  addresses    Address[]
  token        String         @unique
  createdAt    DateTime       @default(now())
  updatedAt    DateTime?      @updatedAt
  Wishlist     Wishlist?
  phoneNumbers phoneNumbers[]

  @@unique([email])
  @@index([firstName, lastName, email])
}

enum Gender {
  MALE
  FEMALE
}

model phoneNumbers {
  phoneId     Int    @id @default(autoincrement())
  phone       String
  countryCode String
  userId      Int
  user        User   @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@unique([phone])
  @@index([phone])
}

model LoginLogs {
  LoginLogId Int       @id @default(autoincrement())
  phone      String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
}

model UserLogin {
  userLoginId Int       @id @default(autoincrement())
  logout      Boolean   @default(false)
  fcm         String?
  deviceId    String?
  userId      Int
  user        User      @relation(fields: [userId], references: [userId])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
}

model Cart {
  cartId    Int        @id @default(autoincrement())
  userId    Int?
  user      User?      @relation(fields: [userId], references: [userId])
  cartItems CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime?  @updatedAt
}

model CartItem {
  cartId        Int
  productId     Int
  quantity      Int
  discountName  String?
  discountValue Decimal?
  discountType  DiscountType?
  cart          Cart          @relation(fields: [cartId], references: [cartId])
  product       Product       @relation(fields: [productId], references: [productId])
  couponId      Int?
  coupon        Coupon?       @relation(fields: [couponId], references: [couponId])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime?     @updatedAt

  @@id([cartId, productId])
}

model Discount {
  discountId         Int            @id @default(autoincrement())
  discountName       String
  discountPercentage Decimal?
  discountAmount     Decimal?
  discountType       DiscountType
  coupons            Coupon[]
  createdAt          DateTime       @default(now())
  updatedAt          DateTime?      @updatedAt
  meta               DiscountMeta[]
  Product            Product[]
}

model DiscountMeta {
  metaId     Int       @id @default(autoincrement())
  imageUrl   String
  isDeleted  Boolean   @default(false)
  discountId Int?
  discount   Discount? @relation(fields: [discountId], references: [discountId], onDelete: Cascade)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
}

enum DiscountType {
  PERCENTAGE
  AMOUNT
}

model Coupon {
  couponId      Int          @id @default(autoincrement())
  couponName    String
  couponCode    String       @unique
  discountId    Int?
  discount      Discount?    @relation(fields: [discountId], references: [discountId])
  coupons       CartItem[]
  couponUsers   CouponUser[]
  startAt       DateTime
  endAt         DateTime
  numberOfUsers Int
  active        Boolean
  score         Int
  meta          CouponMeta[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime?    @updatedAt
}

model CouponMeta {
  metaId    Int       @id @default(autoincrement())
  imageUrl  String
  isDeleted Boolean   @default(false)
  couponId  Int?
  coupon    Coupon?   @relation(fields: [couponId], references: [couponId], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model CouponUser {
  couponId  Int
  coupons   Coupon    @relation(fields: [couponId], references: [couponId])
  userId    Int
  user      User      @relation(fields: [userId], references: [userId])
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@id([userId, couponId])
}

enum OrderStaus {
  PENDING
  PROCEEDED
  PACKED
  OUT_FOR_DELIVERY
  DELIVERED
  COMPLETED
  CANCELED
}

enum PaymentMethods {
  CREDIT_CARD
  DEBIT_CARD
  CASH_ON_DELIVERY
  UPI
}

model Order {
  orderId            String               @id()
  userId             Int
  user               User                 @relation(fields: [userId], references: [userId])
  status             OrderStaus
  totalDiscountSum   Decimal              @default(0)
  totalCost          Decimal
  totalSumWithCharge Decimal?
  totalItem          Int                  @default(0)
  OrderItem          OrderItem[]
  addresses          OrderAddress[]
  shippingCharge     Decimal?
  expectedDelivery   DateTime?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime?            @updatedAt
  Payment            Payment[]
  OrderStatusHistory OrderStatusHistory[]

  @@index([status])
}

model OrderStatusHistory {
  orderStatusId Int        @id() @default(autoincrement())
  orderId       String
  order         Order      @relation(fields: [orderId], references: [orderId])
  satus         OrderStaus
  createdAt     DateTime   @default(now())
  updatedAt     DateTime?  @updatedAt
}

model OrderAddress {
  orderId   String
  order     Order     @relation(fields: [orderId], references: [orderId])
  addressId Int
  address   Address   @relation(fields: [addressId], references: [addressId])
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@id([orderId, addressId])
}

model OrderItem {
  orderId            String
  productId          Int
  quantity           Int
  cumulativeQuantity Int           @default(0)
  unitPrice          Decimal
  total              Decimal
  discountName       String?
  discountValue      Decimal?
  discountType       DiscountType?
  order              Order         @relation(fields: [orderId], references: [orderId])
  product            Product       @relation(fields: [productId], references: [productId])
  discount           Decimal?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime?     @updatedAt

  @@id([orderId, productId])
}

model Payment {
  paymentId     Int            @id() @default(autoincrement())
  orderId       String
  order         Order          @relation(fields: [orderId], references: [orderId])
  paymentMethod PaymentMethods
  transactionId String?
  amount        Decimal
  status        PaymentStatus
  createdAt     DateTime       @default(now())
  updatedAt     DateTime?      @updatedAt
}

enum PaymentStatus {
  PAID
  UNPAID
  FAILED
}

model Advertisement {
  advertisementId Int       @id @default(autoincrement())
  products        Product[]
  imageURL        String
  description     String
  type            String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime? @updatedAt
}
